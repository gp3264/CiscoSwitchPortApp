# coding: utf-8

"""
    Python InsightVM API Client

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authentication': 'AuthenticationSource',
        'email': 'str',
        'enabled': 'bool',
        'id': 'int',
        'links': 'list[Link]',
        'locale': 'LocalePreferences',
        'locked': 'bool',
        'login': 'str',
        'name': 'str',
        'role': 'UserRole'
    }

    attribute_map = {
        'authentication': 'authentication',
        'email': 'email',
        'enabled': 'enabled',
        'id': 'id',
        'links': 'links',
        'locale': 'locale',
        'locked': 'locked',
        'login': 'login',
        'name': 'name',
        'role': 'role'
    }

    def __init__(self, authentication=None, email=None, enabled=None, id=None, links=None, locale=None, locked=None, login=None, name=None, role=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501

        self._authentication = None
        self._email = None
        self._enabled = None
        self._id = None
        self._links = None
        self._locale = None
        self._locked = None
        self._login = None
        self._name = None
        self._role = None
        self.discriminator = None

        if authentication is not None:
            self.authentication = authentication
        if email is not None:
            self.email = email
        if enabled is not None:
            self.enabled = enabled
        if id is not None:
            self.id = id
        if links is not None:
            self.links = links
        if locale is not None:
            self.locale = locale
        if locked is not None:
            self.locked = locked
        self.login = login
        self.name = name
        if role is not None:
            self.role = role

    @property
    def authentication(self):
        """Gets the authentication of this User.  # noqa: E501

        The authentication source used to authenticate the user.  # noqa: E501

        :return: The authentication of this User.  # noqa: E501
        :rtype: AuthenticationSource
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this User.

        The authentication source used to authenticate the user.  # noqa: E501

        :param authentication: The authentication of this User.  # noqa: E501
        :type: AuthenticationSource
        """

        self._authentication = authentication

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501

        The email address of the user.  # noqa: E501

        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.

        The email address of the user.  # noqa: E501

        :param email: The email of this User.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def enabled(self):
        """Gets the enabled of this User.  # noqa: E501

        Whether the user account is enabled.  # noqa: E501

        :return: The enabled of this User.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this User.

        Whether the user account is enabled.  # noqa: E501

        :param enabled: The enabled of this User.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501

        The identifier of the user.  # noqa: E501

        :return: The id of this User.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.

        The identifier of the user.  # noqa: E501

        :param id: The id of this User.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def links(self):
        """Gets the links of this User.  # noqa: E501

        Hypermedia links to corresponding or related resources.  # noqa: E501

        :return: The links of this User.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this User.

        Hypermedia links to corresponding or related resources.  # noqa: E501

        :param links: The links of this User.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def locale(self):
        """Gets the locale of this User.  # noqa: E501

        The locale and language preferences for the user.  # noqa: E501

        :return: The locale of this User.  # noqa: E501
        :rtype: LocalePreferences
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this User.

        The locale and language preferences for the user.  # noqa: E501

        :param locale: The locale of this User.  # noqa: E501
        :type: LocalePreferences
        """

        self._locale = locale

    @property
    def locked(self):
        """Gets the locked of this User.  # noqa: E501

        Whether the user account is locked (exceeded maximum password retry attempts).  # noqa: E501

        :return: The locked of this User.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this User.

        Whether the user account is locked (exceeded maximum password retry attempts).  # noqa: E501

        :param locked: The locked of this User.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    @property
    def login(self):
        """Gets the login of this User.  # noqa: E501

        The login name of the user.  # noqa: E501

        :return: The login of this User.  # noqa: E501
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this User.

        The login name of the user.  # noqa: E501

        :param login: The login of this User.  # noqa: E501
        :type: str
        """
        if login is None:
            raise ValueError("Invalid value for `login`, must not be `None`")  # noqa: E501

        self._login = login

    @property
    def name(self):
        """Gets the name of this User.  # noqa: E501

        The full name of the user.  # noqa: E501

        :return: The name of this User.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.

        The full name of the user.  # noqa: E501

        :param name: The name of this User.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def role(self):
        """Gets the role of this User.  # noqa: E501

        The privileges and role the user is assigned.  # noqa: E501

        :return: The role of this User.  # noqa: E501
        :rtype: UserRole
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this User.

        The privileges and role the user is assigned.  # noqa: E501

        :param role: The role of this User.  # noqa: E501
        :type: UserRole
        """

        self._role = role

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
