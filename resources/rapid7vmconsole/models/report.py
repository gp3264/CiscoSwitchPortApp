# coding: utf-8

"""
    Python InsightVM API Client

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Report(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'baseline': 'object',
        'bureau': 'str',
        'component': 'str',
        'database': 'ReportConfigDatabaseResource',
        'email': 'ReportEmail',
        'enclave': 'str',
        'filters': 'ReportConfigFiltersResource',
        'format': 'str',
        'frequency': 'ReportFrequency',
        'id': 'int',
        'language': 'str',
        'links': 'list[Link]',
        'name': 'str',
        'organization': 'str',
        'owner': 'int',
        'policies': 'list[int]',
        'policy': 'int',
        'query': 'str',
        'range': 'RangeResource',
        'remediation': 'RemediationResource',
        'risk_trend': 'RiskTrendResource',
        'scope': 'ReportConfigScopeResource',
        'storage': 'ReportStorage',
        'template': 'str',
        'timezone': 'str',
        'users': 'list[int]',
        'version': 'str'
    }

    attribute_map = {
        'baseline': 'baseline',
        'bureau': 'bureau',
        'component': 'component',
        'database': 'database',
        'email': 'email',
        'enclave': 'enclave',
        'filters': 'filters',
        'format': 'format',
        'frequency': 'frequency',
        'id': 'id',
        'language': 'language',
        'links': 'links',
        'name': 'name',
        'organization': 'organization',
        'owner': 'owner',
        'policies': 'policies',
        'policy': 'policy',
        'query': 'query',
        'range': 'range',
        'remediation': 'remediation',
        'risk_trend': 'riskTrend',
        'scope': 'scope',
        'storage': 'storage',
        'template': 'template',
        'timezone': 'timezone',
        'users': 'users',
        'version': 'version'
    }

    def __init__(self, baseline=None, bureau=None, component=None, database=None, email=None, enclave=None, filters=None, format=None, frequency=None, id=None, language=None, links=None, name=None, organization=None, owner=None, policies=None, policy=None, query=None, range=None, remediation=None, risk_trend=None, scope=None, storage=None, template=None, timezone=None, users=None, version=None):  # noqa: E501
        """Report - a model defined in Swagger"""  # noqa: E501

        self._baseline = None
        self._bureau = None
        self._component = None
        self._database = None
        self._email = None
        self._enclave = None
        self._filters = None
        self._format = None
        self._frequency = None
        self._id = None
        self._language = None
        self._links = None
        self._name = None
        self._organization = None
        self._owner = None
        self._policies = None
        self._policy = None
        self._query = None
        self._range = None
        self._remediation = None
        self._risk_trend = None
        self._scope = None
        self._storage = None
        self._template = None
        self._timezone = None
        self._users = None
        self._version = None
        self.discriminator = None

        if baseline is not None:
            self.baseline = baseline
        if bureau is not None:
            self.bureau = bureau
        if component is not None:
            self.component = component
        if database is not None:
            self.database = database
        if email is not None:
            self.email = email
        if enclave is not None:
            self.enclave = enclave
        if filters is not None:
            self.filters = filters
        if format is not None:
            self.format = format
        if frequency is not None:
            self.frequency = frequency
        if id is not None:
            self.id = id
        if language is not None:
            self.language = language
        if links is not None:
            self.links = links
        if name is not None:
            self.name = name
        if organization is not None:
            self.organization = organization
        if owner is not None:
            self.owner = owner
        if policies is not None:
            self.policies = policies
        if policy is not None:
            self.policy = policy
        if query is not None:
            self.query = query
        if range is not None:
            self.range = range
        if remediation is not None:
            self.remediation = remediation
        if risk_trend is not None:
            self.risk_trend = risk_trend
        if scope is not None:
            self.scope = scope
        if storage is not None:
            self.storage = storage
        if template is not None:
            self.template = template
        if timezone is not None:
            self.timezone = timezone
        if users is not None:
            self.users = users
        if version is not None:
            self.version = version

    @property
    def baseline(self):
        """Gets the baseline of this Report.  # noqa: E501

        If the template is `baseline-comparison` or `executive-overview` the baseline scan to compare against. This can be the `first` scan, the `previous` scan, or a scan as of a specified date. Defaults to `previous`.  # noqa: E501

        :return: The baseline of this Report.  # noqa: E501
        :rtype: object
        """
        return self._baseline

    @baseline.setter
    def baseline(self, baseline):
        """Sets the baseline of this Report.

        If the template is `baseline-comparison` or `executive-overview` the baseline scan to compare against. This can be the `first` scan, the `previous` scan, or a scan as of a specified date. Defaults to `previous`.  # noqa: E501

        :param baseline: The baseline of this Report.  # noqa: E501
        :type: object
        """

        self._baseline = baseline

    @property
    def bureau(self):
        """Gets the bureau of this Report.  # noqa: E501

        The name of the bureau for a CyberScope report. Only used when the format is `\"cyberscope-xml\"`.  # noqa: E501

        :return: The bureau of this Report.  # noqa: E501
        :rtype: str
        """
        return self._bureau

    @bureau.setter
    def bureau(self, bureau):
        """Sets the bureau of this Report.

        The name of the bureau for a CyberScope report. Only used when the format is `\"cyberscope-xml\"`.  # noqa: E501

        :param bureau: The bureau of this Report.  # noqa: E501
        :type: str
        """

        self._bureau = bureau

    @property
    def component(self):
        """Gets the component of this Report.  # noqa: E501

        The name of the component for a CyberScope report. Only used when the format is `\"cyberscope-xml\"`.  # noqa: E501

        :return: The component of this Report.  # noqa: E501
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this Report.

        The name of the component for a CyberScope report. Only used when the format is `\"cyberscope-xml\"`.  # noqa: E501

        :param component: The component of this Report.  # noqa: E501
        :type: str
        """

        self._component = component

    @property
    def database(self):
        """Gets the database of this Report.  # noqa: E501

        Configuration for database export. Only used when the format is `\"database-export\"`.  # noqa: E501

        :return: The database of this Report.  # noqa: E501
        :rtype: ReportConfigDatabaseResource
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this Report.

        Configuration for database export. Only used when the format is `\"database-export\"`.  # noqa: E501

        :param database: The database of this Report.  # noqa: E501
        :type: ReportConfigDatabaseResource
        """

        self._database = database

    @property
    def email(self):
        """Gets the email of this Report.  # noqa: E501

        Email distribution settings for the report.  # noqa: E501

        :return: The email of this Report.  # noqa: E501
        :rtype: ReportEmail
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Report.

        Email distribution settings for the report.  # noqa: E501

        :param email: The email of this Report.  # noqa: E501
        :type: ReportEmail
        """

        self._email = email

    @property
    def enclave(self):
        """Gets the enclave of this Report.  # noqa: E501

        The name of the enclave for a CyberScope report. Only used when the format is `\"cyberscope-xml\"`.  # noqa: E501

        :return: The enclave of this Report.  # noqa: E501
        :rtype: str
        """
        return self._enclave

    @enclave.setter
    def enclave(self, enclave):
        """Sets the enclave of this Report.

        The name of the enclave for a CyberScope report. Only used when the format is `\"cyberscope-xml\"`.  # noqa: E501

        :param enclave: The enclave of this Report.  # noqa: E501
        :type: str
        """

        self._enclave = enclave

    @property
    def filters(self):
        """Gets the filters of this Report.  # noqa: E501

        Filters applied to the contents of the report. The supported filters for a report vary  by format and template.  <div class=\"properties\">  <div class=\"property-info\">  <span class=\"property-name\">categories</span> <span class=\"param-type complex\">Object</span>  <div class=\"redoc-markdown-block\">The vulnerability categories to include or exclude in the report. Only included or excluded may be specified, not both.</div> </div>  <div class=\"properties nested\">  <div class=\"property-info\">  <span class=\"property-name\">included</span> <span class=\"param-type param-array-format integer\">Array[string]</span>  <div class=\"redoc-markdown-block\">The identifiers of the vulnerability categories to included in the report.</div>  </div>  <div class=\"property-info\">  <span class=\"property-name\">excluded</span> <span class=\"param-type param-array-format integer\">Array[string]</span>  <div class=\"redoc-markdown-block\">The identifiers of the vulnerability categories to exclude in the report.</div>  </div>  </div>  <div class=\"property-info\">  <span class=\"property-name\">severity</span> <span class=\"param-type\">string</span>  <div class=\"param-enum\">  <span class=\"param-enum-value string\">\"all\"</span>  <span class=\"param-enum-value string\">\"critical\"</span>  <span class=\"param-enum-value string\">\"critical-and-severe\"</span>  </div>  <div class=\"redoc-markdown-block\">The vulnerability severities to include in the report.</div> </div>  <div class=\"property-info\">  <span class=\"property-name\">statuses</span> <span class=\"param-type param-array-format integer\">Array[string]</span>  <div class=\"param-enum\">  <span class=\"param-enum-value string\">\"vulnerable\"</span>  <span class=\"param-enum-value string\">\"vulnerable-version\"</span>  <span class=\"param-enum-value string\">\"potentially-vulnerable\"</span>  <span class=\"param-enum-value string\">\"vulnerable-and-validated\"</span>  </div>  <div class=\"redoc-markdown-block\">The vulnerability statuses to include in the report. If <code>\"vulnerable-and-validated\"</code> is selected  no other values can be specified. </div>  </div>  </div>  The following filter elements may be defined for non-templatized report formats:  | Format                                | Categories     | Severity   | Statuses   |  | ------------------------------------- |:--------------:|:----------:|:----------:|  | `arf-xml`                             |                |            |            |  | `csv-export`                          | &check;        | &check;    | &check;    |  | `cyberscope-xml`                      |                |            |            |  | `database-export`                     |                |            |            |  | `nexpose-simple-xml`                  | &check;        | &check;    |            |  | `oval-xml`                            |                |            |            |  | `qualys-xml`                          | &check;        | &check;    |            |  | `scap-xml`                            | &check;        | &check;    |            |  | `sql-query`                           | &check;        | &check;    | &check;    |  | `xccdf-csv`                           |                |            |            |  | `xccdf-xml`                           | &check;        | &check;    |            |  | `xml-export`                          | &check;        | &check;    | &check;    |  | `xml-export-v2`                       | &check;        | &check;    | &check;    |   The following filter elements may be defined for templatized report formats:  | Template                                | Categories     | Severity   | Statuses   |  | --------------------------------------- |:--------------:|:----------:|:----------:|  | `audit-report`                          | &check;        | &check;    |            |  | `baseline-comparison`                   |                |            |            |  | `basic-vulnerability-check-results`     | &check;        | &check;    | &check;    |  | `executive-overview`                    |                |            |            |  | `highest-risk-vulns`                    |                |            |            |  | `pci-attestation-v12`                   |                |            |            |  | `pci-executive-summary-v12`             |                |            |            |  | `pci-vuln-details-v12`                  |                |            |            |  | `policy-details`                        | &check;        | &check;    | &check;    |  | `policy-eval`                           |                |            |            |  | `policy-summary`                        | &check;        | &check;    | &check;    |  | `prioritized-remediations`              | &check;        | &check;    | &check;    |  | `prioritized-remediations-with-details` | &check;        | &check;    | &check;    |  | `r7-discovered-assets`                  | &check;        | &check;    | &check;    |  | `r7-vulnerability-exceptions`           | &check;        | &check;    | &check;    |  | `remediation-plan`                      | &check;        | &check;    |            |  | `report-card`                           | &check;        | &check;    |            |  | `risk-scorecard`                        | &check;        | &check;    | &check;    |  | `rule-breakdown-summary`                | &check;        | &check;    | &check;    |  | `top-policy-remediations`               | &check;        | &check;    | &check;    |  | `top-policy-remediations-with-details`  | &check;        | &check;    | &check;    |  | `top-riskiest-assets`                   | &check;        | &check;    | &check;    |  | `top-vulnerable-assets`                 | &check;        | &check;    | &check;    |  | `vulnerability-trends`                  | &check;        | &check;    | &check;    |    # noqa: E501

        :return: The filters of this Report.  # noqa: E501
        :rtype: ReportConfigFiltersResource
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this Report.

        Filters applied to the contents of the report. The supported filters for a report vary  by format and template.  <div class=\"properties\">  <div class=\"property-info\">  <span class=\"property-name\">categories</span> <span class=\"param-type complex\">Object</span>  <div class=\"redoc-markdown-block\">The vulnerability categories to include or exclude in the report. Only included or excluded may be specified, not both.</div> </div>  <div class=\"properties nested\">  <div class=\"property-info\">  <span class=\"property-name\">included</span> <span class=\"param-type param-array-format integer\">Array[string]</span>  <div class=\"redoc-markdown-block\">The identifiers of the vulnerability categories to included in the report.</div>  </div>  <div class=\"property-info\">  <span class=\"property-name\">excluded</span> <span class=\"param-type param-array-format integer\">Array[string]</span>  <div class=\"redoc-markdown-block\">The identifiers of the vulnerability categories to exclude in the report.</div>  </div>  </div>  <div class=\"property-info\">  <span class=\"property-name\">severity</span> <span class=\"param-type\">string</span>  <div class=\"param-enum\">  <span class=\"param-enum-value string\">\"all\"</span>  <span class=\"param-enum-value string\">\"critical\"</span>  <span class=\"param-enum-value string\">\"critical-and-severe\"</span>  </div>  <div class=\"redoc-markdown-block\">The vulnerability severities to include in the report.</div> </div>  <div class=\"property-info\">  <span class=\"property-name\">statuses</span> <span class=\"param-type param-array-format integer\">Array[string]</span>  <div class=\"param-enum\">  <span class=\"param-enum-value string\">\"vulnerable\"</span>  <span class=\"param-enum-value string\">\"vulnerable-version\"</span>  <span class=\"param-enum-value string\">\"potentially-vulnerable\"</span>  <span class=\"param-enum-value string\">\"vulnerable-and-validated\"</span>  </div>  <div class=\"redoc-markdown-block\">The vulnerability statuses to include in the report. If <code>\"vulnerable-and-validated\"</code> is selected  no other values can be specified. </div>  </div>  </div>  The following filter elements may be defined for non-templatized report formats:  | Format                                | Categories     | Severity   | Statuses   |  | ------------------------------------- |:--------------:|:----------:|:----------:|  | `arf-xml`                             |                |            |            |  | `csv-export`                          | &check;        | &check;    | &check;    |  | `cyberscope-xml`                      |                |            |            |  | `database-export`                     |                |            |            |  | `nexpose-simple-xml`                  | &check;        | &check;    |            |  | `oval-xml`                            |                |            |            |  | `qualys-xml`                          | &check;        | &check;    |            |  | `scap-xml`                            | &check;        | &check;    |            |  | `sql-query`                           | &check;        | &check;    | &check;    |  | `xccdf-csv`                           |                |            |            |  | `xccdf-xml`                           | &check;        | &check;    |            |  | `xml-export`                          | &check;        | &check;    | &check;    |  | `xml-export-v2`                       | &check;        | &check;    | &check;    |   The following filter elements may be defined for templatized report formats:  | Template                                | Categories     | Severity   | Statuses   |  | --------------------------------------- |:--------------:|:----------:|:----------:|  | `audit-report`                          | &check;        | &check;    |            |  | `baseline-comparison`                   |                |            |            |  | `basic-vulnerability-check-results`     | &check;        | &check;    | &check;    |  | `executive-overview`                    |                |            |            |  | `highest-risk-vulns`                    |                |            |            |  | `pci-attestation-v12`                   |                |            |            |  | `pci-executive-summary-v12`             |                |            |            |  | `pci-vuln-details-v12`                  |                |            |            |  | `policy-details`                        | &check;        | &check;    | &check;    |  | `policy-eval`                           |                |            |            |  | `policy-summary`                        | &check;        | &check;    | &check;    |  | `prioritized-remediations`              | &check;        | &check;    | &check;    |  | `prioritized-remediations-with-details` | &check;        | &check;    | &check;    |  | `r7-discovered-assets`                  | &check;        | &check;    | &check;    |  | `r7-vulnerability-exceptions`           | &check;        | &check;    | &check;    |  | `remediation-plan`                      | &check;        | &check;    |            |  | `report-card`                           | &check;        | &check;    |            |  | `risk-scorecard`                        | &check;        | &check;    | &check;    |  | `rule-breakdown-summary`                | &check;        | &check;    | &check;    |  | `top-policy-remediations`               | &check;        | &check;    | &check;    |  | `top-policy-remediations-with-details`  | &check;        | &check;    | &check;    |  | `top-riskiest-assets`                   | &check;        | &check;    | &check;    |  | `top-vulnerable-assets`                 | &check;        | &check;    | &check;    |  | `vulnerability-trends`                  | &check;        | &check;    | &check;    |    # noqa: E501

        :param filters: The filters of this Report.  # noqa: E501
        :type: ReportConfigFiltersResource
        """

        self._filters = filters

    @property
    def format(self):
        """Gets the format of this Report.  # noqa: E501

        The output format of the report. The format will restrict the available templates and parameters that can be specified.  # noqa: E501

        :return: The format of this Report.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this Report.

        The output format of the report. The format will restrict the available templates and parameters that can be specified.  # noqa: E501

        :param format: The format of this Report.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def frequency(self):
        """Gets the frequency of this Report.  # noqa: E501

        The recurring frequency with which to generate the report.  # noqa: E501

        :return: The frequency of this Report.  # noqa: E501
        :rtype: ReportFrequency
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this Report.

        The recurring frequency with which to generate the report.  # noqa: E501

        :param frequency: The frequency of this Report.  # noqa: E501
        :type: ReportFrequency
        """

        self._frequency = frequency

    @property
    def id(self):
        """Gets the id of this Report.  # noqa: E501

        The identifier of the report.  # noqa: E501

        :return: The id of this Report.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Report.

        The identifier of the report.  # noqa: E501

        :param id: The id of this Report.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def language(self):
        """Gets the language of this Report.  # noqa: E501

        The locale (language) in which the report is generated  # noqa: E501

        :return: The language of this Report.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Report.

        The locale (language) in which the report is generated  # noqa: E501

        :param language: The language of this Report.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def links(self):
        """Gets the links of this Report.  # noqa: E501

        Hypermedia links to corresponding or related resources.  # noqa: E501

        :return: The links of this Report.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Report.

        Hypermedia links to corresponding or related resources.  # noqa: E501

        :param links: The links of this Report.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this Report.  # noqa: E501

        The name of the report.  # noqa: E501

        :return: The name of this Report.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Report.

        The name of the report.  # noqa: E501

        :param name: The name of this Report.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def organization(self):
        """Gets the organization of this Report.  # noqa: E501

        The organization used for a XCCDF XML report. Only used when the format is `\"xccdf-xml\"`.  # noqa: E501

        :return: The organization of this Report.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this Report.

        The organization used for a XCCDF XML report. Only used when the format is `\"xccdf-xml\"`.  # noqa: E501

        :param organization: The organization of this Report.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def owner(self):
        """Gets the owner of this Report.  # noqa: E501

        The identifier of the report owner.  # noqa: E501

        :return: The owner of this Report.  # noqa: E501
        :rtype: int
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Report.

        The identifier of the report owner.  # noqa: E501

        :param owner: The owner of this Report.  # noqa: E501
        :type: int
        """

        self._owner = owner

    @property
    def policies(self):
        """Gets the policies of this Report.  # noqa: E501

        If the template is `rule-breakdown-summary`, `top-policy-remediations`, or `top-policy-remediations-with-details` the identifiers of the policies to report against.  # noqa: E501

        :return: The policies of this Report.  # noqa: E501
        :rtype: list[int]
        """
        return self._policies

    @policies.setter
    def policies(self, policies):
        """Sets the policies of this Report.

        If the template is `rule-breakdown-summary`, `top-policy-remediations`, or `top-policy-remediations-with-details` the identifiers of the policies to report against.  # noqa: E501

        :param policies: The policies of this Report.  # noqa: E501
        :type: list[int]
        """

        self._policies = policies

    @property
    def policy(self):
        """Gets the policy of this Report.  # noqa: E501

        The policy to report on. Only used when the format is `\"oval-xml\"`, `\"\"xccdf-csv\"`, or `\"xccdf-xml\"`.  # noqa: E501

        :return: The policy of this Report.  # noqa: E501
        :rtype: int
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this Report.

        The policy to report on. Only used when the format is `\"oval-xml\"`, `\"\"xccdf-csv\"`, or `\"xccdf-xml\"`.  # noqa: E501

        :param policy: The policy of this Report.  # noqa: E501
        :type: int
        """

        self._policy = policy

    @property
    def query(self):
        """Gets the query of this Report.  # noqa: E501

        SQL query to run against the Reporting Data Model. Only used when the format is `\"sql-query\"`.  # noqa: E501

        :return: The query of this Report.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this Report.

        SQL query to run against the Reporting Data Model. Only used when the format is `\"sql-query\"`.  # noqa: E501

        :param query: The query of this Report.  # noqa: E501
        :type: str
        """

        self._query = query

    @property
    def range(self):
        """Gets the range of this Report.  # noqa: E501

        If the template is `vulnerability-trends`, `r7-vulnerability-exceptions`, or `r7-discovered-assets` the date range to trend over.  # noqa: E501

        :return: The range of this Report.  # noqa: E501
        :rtype: RangeResource
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this Report.

        If the template is `vulnerability-trends`, `r7-vulnerability-exceptions`, or `r7-discovered-assets` the date range to trend over.  # noqa: E501

        :param range: The range of this Report.  # noqa: E501
        :type: RangeResource
        """

        self._range = range

    @property
    def remediation(self):
        """Gets the remediation of this Report.  # noqa: E501

        If the template is `prioritized-remediations`, `prioritized-remediations-with-details`, `top-policy-remediations`, or `top-policy-remediations-with-details` the remediation display settings.  # noqa: E501

        :return: The remediation of this Report.  # noqa: E501
        :rtype: RemediationResource
        """
        return self._remediation

    @remediation.setter
    def remediation(self, remediation):
        """Sets the remediation of this Report.

        If the template is `prioritized-remediations`, `prioritized-remediations-with-details`, `top-policy-remediations`, or `top-policy-remediations-with-details` the remediation display settings.  # noqa: E501

        :param remediation: The remediation of this Report.  # noqa: E501
        :type: RemediationResource
        """

        self._remediation = remediation

    @property
    def risk_trend(self):
        """Gets the risk_trend of this Report.  # noqa: E501

        Configuration details for risk trending output.  # noqa: E501

        :return: The risk_trend of this Report.  # noqa: E501
        :rtype: RiskTrendResource
        """
        return self._risk_trend

    @risk_trend.setter
    def risk_trend(self, risk_trend):
        """Sets the risk_trend of this Report.

        Configuration details for risk trending output.  # noqa: E501

        :param risk_trend: The risk_trend of this Report.  # noqa: E501
        :type: RiskTrendResource
        """

        self._risk_trend = risk_trend

    @property
    def scope(self):
        """Gets the scope of this Report.  # noqa: E501

        The scope of the report. Scope is an object that has the following properties that vary by format and template:  <div class=\"properties\">  <div class=\"property-info\">  <span class=\"property-name\">assets</span> <span class=\"param-type param-array-format integer\">Array[integer &lt;int32&gt;]</span>  <div class=\"redoc-markdown-block\">The identifiers of the assets to report on.</div>  </div>  <div class=\"property-info\">  <span class=\"property-name\">sites</span> <span class=\"param-type param-array-format integer\">Array[integer &lt;int32&gt;]</span>  <div class=\"redoc-markdown-block\">The identifiers of the sites to report on.</div>  </div>  <div class=\"property-info\">  <span class=\"property-name\">assetGroups</span> <span class=\"param-type param-array-format integer\">Array[integer &lt;int32&gt;]</span>  <div class=\"redoc-markdown-block\">The identifiers of the asset to report on.</div>  </div>  <div class=\"property-info\">  <span class=\"property-name\">tags</span> <span class=\"param-type param-array-format integer\">Array[integer &lt;int32&gt;]</span>  <div class=\"redoc-markdown-block\">The identifiers of the tag to report on.</div>  </div>  <div class=\"property-info\">  <span class=\"property-name\">scan</span> <span class=\"param-type param-array-format integer\">integer &lt;int32&gt;</span>  <div class=\"redoc-markdown-block\">The identifier of the scan to report on.</div>  </div>  </div>  The following scope elements may be defined for non-templatized report formats:  | Format                                | Assets     | Sites   | Asset Groups | Tags    | Scan      |  | ------------------------------------- |:----------:|:-------:|:------------:|:-------:|:---------:|  | `arf-xml`                             | &check;    | &check; | &check;      | &check; |           |  | `csv-export`                          | &check;    | &check; | &check;      | &check; | &check;   |  | `cyberscope-xml`                      | &check;    | &check; | &check;      | &check; | &check;   |  | `database-export`                     |            | &check; |              |         |           |  | `nexpose-simple-xml`                  | &check;    | &check; | &check;      | &check; | &check;   |  | `oval-xml`                            | &check;    | &check; | &check;      | &check; |           |  | `qualys-xml`                          | &check;    | &check; | &check;      | &check; | &check;   |  | `scap-xml`                            | &check;    | &check; | &check;      | &check; | &check;   |  | `sql-query`                           | &check;    | &check; | &check;      | &check; | &check;   |  | `xccdf-csv`                           | &check;    |         |              |         |           |  | `xccdf-xml`                           | &check;    | &check; | &check;      | &check; | &check;   |  | `xml-export`                          | &check;    | &check; | &check;      | &check; | &check;   |  | `xml-export-v2`                       | &check;    | &check; | &check;      | &check; | &check;   |   The following scope elements may be defined for templatized report formats:  | Template                                 | Assets     | Sites   | Asset Groups | Tags    | Scan    |  | -----------------------------------------|:----------:|:-------:|:------------:|:-------:|:-------:|  | `audit-report`                           | &check;    | &check; |  &check;     | &check; | &check; |  | `baseline-comparison`                    | &check;    | &check; |  &check;     | &check; |         |  | `basic-vulnerability-check-results`      | &check;    | &check; |  &check;     | &check; | &check; |  | `executive-overview`                     | &check;    | &check; |  &check;     | &check; |         |  | `highest-risk-vulns`                     | &check;    | &check; |  &check;     | &check; |         |  | `pci-attestation-v12`                    | &check;    | &check; |  &check;     | &check; | &check; |  | `pci-executive-summary-v12`              | &check;    | &check; |  &check;     | &check; | &check; |  | `pci-vuln-details-v12`                   | &check;    | &check; |  &check;     | &check; | &check; |  | `policy-details`                         | &check;    | &check; |  &check;     | &check; |         |  | `policy-eval`                            | &check;    | &check; |  &check;     | &check; |         |  | `policy-summary`                         | &check;    | &check; |  &check;     | &check; | &check; |  | `prioritized-remediations`               | &check;    | &check; |  &check;     | &check; | &check; |  | `prioritized-remediations-with-details`  | &check;    | &check; |  &check;     | &check; | &check; |  | `r7-discovered-assets`                   | &check;    | &check; |  &check;     | &check; | &check; |  | `r7-vulnerability-exceptions`            | &check;    | &check; |  &check;     | &check; | &check; |  | `remediation-plan`                       | &check;    | &check; |  &check;     | &check; | &check; |  | `report-card`                            | &check;    | &check; |  &check;     | &check; | &check; |  | `risk-scorecard`                         | &check;    | &check; |  &check;     | &check; |         |  | `rule-breakdown-summary`                 | &check;    | &check; |  &check;     | &check; |         |  | `top-policy-remediations`                | &check;    | &check; |  &check;     | &check; |         |  | `top-policy-remediations-with-details`   | &check;    | &check; |  &check;     | &check; |         |  | `top-riskiest-assets`                    | &check;    | &check; |  &check;     | &check; | &check; |  | `top-vulnerable-assets`                  | &check;    | &check; |  &check;     | &check; | &check; |  | `vulnerability-trends`                   | &check;    | &check; |  &check;     | &check; |         |  If a report supports specifying a scan as the scope and a scan is specified, no other scope elements may be defined.  In all other cases as many different types of supported scope elements can be specified in any combination. All  reports except the `sql-query` format require at least one element to be specified as the scope.   # noqa: E501

        :return: The scope of this Report.  # noqa: E501
        :rtype: ReportConfigScopeResource
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this Report.

        The scope of the report. Scope is an object that has the following properties that vary by format and template:  <div class=\"properties\">  <div class=\"property-info\">  <span class=\"property-name\">assets</span> <span class=\"param-type param-array-format integer\">Array[integer &lt;int32&gt;]</span>  <div class=\"redoc-markdown-block\">The identifiers of the assets to report on.</div>  </div>  <div class=\"property-info\">  <span class=\"property-name\">sites</span> <span class=\"param-type param-array-format integer\">Array[integer &lt;int32&gt;]</span>  <div class=\"redoc-markdown-block\">The identifiers of the sites to report on.</div>  </div>  <div class=\"property-info\">  <span class=\"property-name\">assetGroups</span> <span class=\"param-type param-array-format integer\">Array[integer &lt;int32&gt;]</span>  <div class=\"redoc-markdown-block\">The identifiers of the asset to report on.</div>  </div>  <div class=\"property-info\">  <span class=\"property-name\">tags</span> <span class=\"param-type param-array-format integer\">Array[integer &lt;int32&gt;]</span>  <div class=\"redoc-markdown-block\">The identifiers of the tag to report on.</div>  </div>  <div class=\"property-info\">  <span class=\"property-name\">scan</span> <span class=\"param-type param-array-format integer\">integer &lt;int32&gt;</span>  <div class=\"redoc-markdown-block\">The identifier of the scan to report on.</div>  </div>  </div>  The following scope elements may be defined for non-templatized report formats:  | Format                                | Assets     | Sites   | Asset Groups | Tags    | Scan      |  | ------------------------------------- |:----------:|:-------:|:------------:|:-------:|:---------:|  | `arf-xml`                             | &check;    | &check; | &check;      | &check; |           |  | `csv-export`                          | &check;    | &check; | &check;      | &check; | &check;   |  | `cyberscope-xml`                      | &check;    | &check; | &check;      | &check; | &check;   |  | `database-export`                     |            | &check; |              |         |           |  | `nexpose-simple-xml`                  | &check;    | &check; | &check;      | &check; | &check;   |  | `oval-xml`                            | &check;    | &check; | &check;      | &check; |           |  | `qualys-xml`                          | &check;    | &check; | &check;      | &check; | &check;   |  | `scap-xml`                            | &check;    | &check; | &check;      | &check; | &check;   |  | `sql-query`                           | &check;    | &check; | &check;      | &check; | &check;   |  | `xccdf-csv`                           | &check;    |         |              |         |           |  | `xccdf-xml`                           | &check;    | &check; | &check;      | &check; | &check;   |  | `xml-export`                          | &check;    | &check; | &check;      | &check; | &check;   |  | `xml-export-v2`                       | &check;    | &check; | &check;      | &check; | &check;   |   The following scope elements may be defined for templatized report formats:  | Template                                 | Assets     | Sites   | Asset Groups | Tags    | Scan    |  | -----------------------------------------|:----------:|:-------:|:------------:|:-------:|:-------:|  | `audit-report`                           | &check;    | &check; |  &check;     | &check; | &check; |  | `baseline-comparison`                    | &check;    | &check; |  &check;     | &check; |         |  | `basic-vulnerability-check-results`      | &check;    | &check; |  &check;     | &check; | &check; |  | `executive-overview`                     | &check;    | &check; |  &check;     | &check; |         |  | `highest-risk-vulns`                     | &check;    | &check; |  &check;     | &check; |         |  | `pci-attestation-v12`                    | &check;    | &check; |  &check;     | &check; | &check; |  | `pci-executive-summary-v12`              | &check;    | &check; |  &check;     | &check; | &check; |  | `pci-vuln-details-v12`                   | &check;    | &check; |  &check;     | &check; | &check; |  | `policy-details`                         | &check;    | &check; |  &check;     | &check; |         |  | `policy-eval`                            | &check;    | &check; |  &check;     | &check; |         |  | `policy-summary`                         | &check;    | &check; |  &check;     | &check; | &check; |  | `prioritized-remediations`               | &check;    | &check; |  &check;     | &check; | &check; |  | `prioritized-remediations-with-details`  | &check;    | &check; |  &check;     | &check; | &check; |  | `r7-discovered-assets`                   | &check;    | &check; |  &check;     | &check; | &check; |  | `r7-vulnerability-exceptions`            | &check;    | &check; |  &check;     | &check; | &check; |  | `remediation-plan`                       | &check;    | &check; |  &check;     | &check; | &check; |  | `report-card`                            | &check;    | &check; |  &check;     | &check; | &check; |  | `risk-scorecard`                         | &check;    | &check; |  &check;     | &check; |         |  | `rule-breakdown-summary`                 | &check;    | &check; |  &check;     | &check; |         |  | `top-policy-remediations`                | &check;    | &check; |  &check;     | &check; |         |  | `top-policy-remediations-with-details`   | &check;    | &check; |  &check;     | &check; |         |  | `top-riskiest-assets`                    | &check;    | &check; |  &check;     | &check; | &check; |  | `top-vulnerable-assets`                  | &check;    | &check; |  &check;     | &check; | &check; |  | `vulnerability-trends`                   | &check;    | &check; |  &check;     | &check; |         |  If a report supports specifying a scan as the scope and a scan is specified, no other scope elements may be defined.  In all other cases as many different types of supported scope elements can be specified in any combination. All  reports except the `sql-query` format require at least one element to be specified as the scope.   # noqa: E501

        :param scope: The scope of this Report.  # noqa: E501
        :type: ReportConfigScopeResource
        """

        self._scope = scope

    @property
    def storage(self):
        """Gets the storage of this Report.  # noqa: E501

        The additional storage location and path.  # noqa: E501

        :return: The storage of this Report.  # noqa: E501
        :rtype: ReportStorage
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this Report.

        The additional storage location and path.  # noqa: E501

        :param storage: The storage of this Report.  # noqa: E501
        :type: ReportStorage
        """

        self._storage = storage

    @property
    def template(self):
        """Gets the template of this Report.  # noqa: E501

        The template for the report (only required if the format is templatized).  # noqa: E501

        :return: The template of this Report.  # noqa: E501
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this Report.

        The template for the report (only required if the format is templatized).  # noqa: E501

        :param template: The template of this Report.  # noqa: E501
        :type: str
        """

        self._template = template

    @property
    def timezone(self):
        """Gets the timezone of this Report.  # noqa: E501

        The timezone the report generates in, such as `\"America/Los_Angeles\"`.  # noqa: E501

        :return: The timezone of this Report.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Report.

        The timezone the report generates in, such as `\"America/Los_Angeles\"`.  # noqa: E501

        :param timezone: The timezone of this Report.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def users(self):
        """Gets the users of this Report.  # noqa: E501

        The identifiers of the users granted explicit access to the report.  # noqa: E501

        :return: The users of this Report.  # noqa: E501
        :rtype: list[int]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this Report.

        The identifiers of the users granted explicit access to the report.  # noqa: E501

        :param users: The users of this Report.  # noqa: E501
        :type: list[int]
        """

        self._users = users

    @property
    def version(self):
        """Gets the version of this Report.  # noqa: E501

        The version of the report Data Model to report against. Only used when the format is `\"sql-query\"`.  # noqa: E501

        :return: The version of this Report.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Report.

        The version of the report Data Model to report against. Only used when the format is `\"sql-query\"`.  # noqa: E501

        :param version: The version of this Report.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Report, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Report):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
