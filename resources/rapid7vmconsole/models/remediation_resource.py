# coding: utf-8

"""
    Python InsightVM API Client

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RemediationResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'solutions': 'int',
        'sort': 'str'
    }

    attribute_map = {
        'solutions': 'solutions',
        'sort': 'sort'
    }

    def __init__(self, solutions=None, sort=None):  # noqa: E501
        """RemediationResource - a model defined in Swagger"""  # noqa: E501

        self._solutions = None
        self._sort = None
        self.discriminator = None

        if solutions is not None:
            self.solutions = solutions
        if sort is not None:
            self.sort = sort

    @property
    def solutions(self):
        """Gets the solutions of this RemediationResource.  # noqa: E501

        The number of remediations to display.  # noqa: E501

        :return: The solutions of this RemediationResource.  # noqa: E501
        :rtype: int
        """
        return self._solutions

    @solutions.setter
    def solutions(self, solutions):
        """Sets the solutions of this RemediationResource.

        The number of remediations to display.  # noqa: E501

        :param solutions: The solutions of this RemediationResource.  # noqa: E501
        :type: int
        """
        if solutions is not None and solutions < 1:  # noqa: E501
            raise ValueError("Invalid value for `solutions`, must be a value greater than or equal to `1`")  # noqa: E501

        self._solutions = solutions

    @property
    def sort(self):
        """Gets the sort of this RemediationResource.  # noqa: E501

        The attribute to prioritize remediation impact. Only supported for the `prioritized-remediations` and `prioritized-remediations-with-details` templates.  # noqa: E501

        :return: The sort of this RemediationResource.  # noqa: E501
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this RemediationResource.

        The attribute to prioritize remediation impact. Only supported for the `prioritized-remediations` and `prioritized-remediations-with-details` templates.  # noqa: E501

        :param sort: The sort of this RemediationResource.  # noqa: E501
        :type: str
        """
        allowed_values = ["assets", "vulnerabilities", "malware_kits", "exploits", "riskscore"]  # noqa: E501
        if sort not in allowed_values:
            raise ValueError(
                "Invalid value for `sort` ({0}), must be one of {1}"  # noqa: E501
                .format(sort, allowed_values)
            )

        self._sort = sort

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RemediationResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RemediationResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
