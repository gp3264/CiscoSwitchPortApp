# coding: utf-8

"""
    Python InsightVM API Client

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RangeResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'every': 'str',
        '_from': 'str',
        'interval': 'int',
        'to': 'str'
    }

    attribute_map = {
        'every': 'every',
        '_from': 'from',
        'interval': 'interval',
        'to': 'to'
    }

    def __init__(self, every=None, _from=None, interval=None, to=None):  # noqa: E501
        """RangeResource - a model defined in Swagger"""  # noqa: E501

        self._every = None
        self.__from = None
        self._interval = None
        self._to = None
        self.discriminator = None

        if every is not None:
            self.every = every
        if _from is not None:
            self._from = _from
        if interval is not None:
            self.interval = interval
        if to is not None:
            self.to = to

    @property
    def every(self):
        """Gets the every of this RangeResource.  # noqa: E501

        If `from` is a custom date the interval amount between reporting periods.  # noqa: E501

        :return: The every of this RangeResource.  # noqa: E501
        :rtype: str
        """
        return self._every

    @every.setter
    def every(self, every):
        """Sets the every of this RangeResource.

        If `from` is a custom date the interval amount between reporting periods.  # noqa: E501

        :param every: The every of this RangeResource.  # noqa: E501
        :type: str
        """
        allowed_values = ["day", "month", "year"]  # noqa: E501
        if every not in allowed_values:
            raise ValueError(
                "Invalid value for `every` ({0}), must be one of {1}"  # noqa: E501
                .format(every, allowed_values)
            )

        self._every = every

    @property
    def _from(self):
        """Gets the _from of this RangeResource.  # noqa: E501

        The start date of the trend, which can either be a duration or a specific date and time.  # noqa: E501

        :return: The _from of this RangeResource.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this RangeResource.

        The start date of the trend, which can either be a duration or a specific date and time.  # noqa: E501

        :param _from: The _from of this RangeResource.  # noqa: E501
        :type: str
        """
        allowed_values = ["P1Y", "P6M", "P3M", "P1M", "<date>"]  # noqa: E501
        if _from not in allowed_values:
            raise ValueError(
                "Invalid value for `_from` ({0}), must be one of {1}"  # noqa: E501
                .format(_from, allowed_values)
            )

        self.__from = _from

    @property
    def interval(self):
        """Gets the interval of this RangeResource.  # noqa: E501

        If `from` is a custom date the interval between reporting periods.   # noqa: E501

        :return: The interval of this RangeResource.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this RangeResource.

        If `from` is a custom date the interval between reporting periods.   # noqa: E501

        :param interval: The interval of this RangeResource.  # noqa: E501
        :type: int
        """

        self._interval = interval

    @property
    def to(self):
        """Gets the to of this RangeResource.  # noqa: E501

        The end date of the trend (empty if `from` is a duration).  # noqa: E501

        :return: The to of this RangeResource.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this RangeResource.

        The end date of the trend (empty if `from` is a duration).  # noqa: E501

        :param to: The to of this RangeResource.  # noqa: E501
        :type: str
        """

        self._to = to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RangeResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RangeResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
